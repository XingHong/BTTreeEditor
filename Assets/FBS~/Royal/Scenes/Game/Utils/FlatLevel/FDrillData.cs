// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Royal.Scenes.Game.Utils.FlatLevel
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FDrillData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static FDrillData GetRootAsFDrillData(ByteBuffer _bb) { return GetRootAsFDrillData(_bb, new FDrillData()); }
  public static FDrillData GetRootAsFDrillData(ByteBuffer _bb, FDrillData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FDrillData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ColorId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MasterTileId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Royal.Scenes.Game.Utils.FlatLevel.FPoint? MasterPoint { get { int o = __p.__offset(8); return o != 0 ? (Royal.Scenes.Game.Utils.FlatLevel.FPoint?)(new Royal.Scenes.Game.Utils.FlatLevel.FPoint()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int Order { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Target { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FDrillData> CreateFDrillData(FlatBufferBuilder builder,
      int ColorId = 0,
      int MasterTileId = 0,
      Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint> MasterPointOffset = default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>),
      int Order = 0,
      int Target = 0) {
    builder.StartTable(5);
    FDrillData.AddTarget(builder, Target);
    FDrillData.AddOrder(builder, Order);
    FDrillData.AddMasterPoint(builder, MasterPointOffset);
    FDrillData.AddMasterTileId(builder, MasterTileId);
    FDrillData.AddColorId(builder, ColorId);
    return FDrillData.EndFDrillData(builder);
  }

  public static void StartFDrillData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddColorId(FlatBufferBuilder builder, int colorId) { builder.AddInt(0, colorId, 0); }
  public static void AddMasterTileId(FlatBufferBuilder builder, int masterTileId) { builder.AddInt(1, masterTileId, 0); }
  public static void AddMasterPoint(FlatBufferBuilder builder, Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint> masterPointOffset) { builder.AddOffset(2, masterPointOffset.Value, 0); }
  public static void AddOrder(FlatBufferBuilder builder, int order) { builder.AddInt(3, order, 0); }
  public static void AddTarget(FlatBufferBuilder builder, int target) { builder.AddInt(4, target, 0); }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FDrillData> EndFDrillData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Royal.Scenes.Game.Utils.FlatLevel.FDrillData>(o);
  }
  public FDrillDataT UnPack() {
    var _o = new FDrillDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FDrillDataT _o) {
    _o.ColorId = this.ColorId;
    _o.MasterTileId = this.MasterTileId;
    _o.MasterPoint = this.MasterPoint.HasValue ? this.MasterPoint.Value.UnPack() : null;
    _o.Order = this.Order;
    _o.Target = this.Target;
  }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FDrillData> Pack(FlatBufferBuilder builder, FDrillDataT _o) {
    if (_o == null) return default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FDrillData>);
    var _MasterPoint = _o.MasterPoint == null ? default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>) : Royal.Scenes.Game.Utils.FlatLevel.FPoint.Pack(builder, _o.MasterPoint);
    return CreateFDrillData(
      builder,
      _o.ColorId,
      _o.MasterTileId,
      _MasterPoint,
      _o.Order,
      _o.Target);
  }
}

public class FDrillDataT
{
  [Newtonsoft.Json.JsonProperty("ColorId")]
  public int ColorId { get; set; }
  [Newtonsoft.Json.JsonProperty("MasterTileId")]
  public int MasterTileId { get; set; }
  [Newtonsoft.Json.JsonProperty("MasterPoint")]
  public Royal.Scenes.Game.Utils.FlatLevel.FPointT MasterPoint { get; set; }
  [Newtonsoft.Json.JsonProperty("Order")]
  public int Order { get; set; }
  [Newtonsoft.Json.JsonProperty("Target")]
  public int Target { get; set; }

  public FDrillDataT() {
    this.ColorId = 0;
    this.MasterTileId = 0;
    this.MasterPoint = null;
    this.Order = 0;
    this.Target = 0;
  }
}


static public class FDrillDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ColorId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MasterTileId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 8 /*MasterPoint*/, Royal.Scenes.Game.Utils.FlatLevel.FPointVerify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*Order*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Target*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
