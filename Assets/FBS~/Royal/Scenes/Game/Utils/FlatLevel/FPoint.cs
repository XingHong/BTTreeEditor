// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Royal.Scenes.Game.Utils.FlatLevel
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static FPoint GetRootAsFPoint(ByteBuffer _bb) { return GetRootAsFPoint(_bb, new FPoint()); }
  public static FPoint GetRootAsFPoint(ByteBuffer _bb, FPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint> CreateFPoint(FlatBufferBuilder builder,
      int X = 0,
      int Y = 0) {
    builder.StartTable(2);
    FPoint.AddY(builder, Y);
    FPoint.AddX(builder, X);
    return FPoint.EndFPoint(builder);
  }

  public static void StartFPoint(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddX(FlatBufferBuilder builder, int x) { builder.AddInt(0, x, 0); }
  public static void AddY(FlatBufferBuilder builder, int y) { builder.AddInt(1, y, 0); }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint> EndFPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>(o);
  }
  public FPointT UnPack() {
    var _o = new FPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FPointT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
  }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint> Pack(FlatBufferBuilder builder, FPointT _o) {
    if (_o == null) return default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>);
    return CreateFPoint(
      builder,
      _o.X,
      _o.Y);
  }
}

public class FPointT
{
  [Newtonsoft.Json.JsonProperty("X")]
  public int X { get; set; }
  [Newtonsoft.Json.JsonProperty("Y")]
  public int Y { get; set; }

  public FPointT() {
    this.X = 0;
    this.Y = 0;
  }
}


static public class FPointVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*X*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Y*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
