// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Royal.Scenes.Game.Utils.FlatLevel
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FCurtainData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static FCurtainData GetRootAsFCurtainData(ByteBuffer _bb) { return GetRootAsFCurtainData(_bb, new FCurtainData()); }
  public static FCurtainData GetRootAsFCurtainData(ByteBuffer _bb, FCurtainData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FCurtainData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ColorId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Order { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Target { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CellCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Width { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Height { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinX { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinY { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FCurtainData> CreateFCurtainData(FlatBufferBuilder builder,
      int Id = 0,
      int ColorId = 0,
      int Order = 0,
      int Target = 0,
      int CellCount = 0,
      int Width = 0,
      int Height = 0,
      int MinX = 0,
      int MinY = 0) {
    builder.StartTable(9);
    FCurtainData.AddMinY(builder, MinY);
    FCurtainData.AddMinX(builder, MinX);
    FCurtainData.AddHeight(builder, Height);
    FCurtainData.AddWidth(builder, Width);
    FCurtainData.AddCellCount(builder, CellCount);
    FCurtainData.AddTarget(builder, Target);
    FCurtainData.AddOrder(builder, Order);
    FCurtainData.AddColorId(builder, ColorId);
    FCurtainData.AddId(builder, Id);
    return FCurtainData.EndFCurtainData(builder);
  }

  public static void StartFCurtainData(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddColorId(FlatBufferBuilder builder, int colorId) { builder.AddInt(1, colorId, 0); }
  public static void AddOrder(FlatBufferBuilder builder, int order) { builder.AddInt(2, order, 0); }
  public static void AddTarget(FlatBufferBuilder builder, int target) { builder.AddInt(3, target, 0); }
  public static void AddCellCount(FlatBufferBuilder builder, int cellCount) { builder.AddInt(4, cellCount, 0); }
  public static void AddWidth(FlatBufferBuilder builder, int width) { builder.AddInt(5, width, 0); }
  public static void AddHeight(FlatBufferBuilder builder, int height) { builder.AddInt(6, height, 0); }
  public static void AddMinX(FlatBufferBuilder builder, int minX) { builder.AddInt(7, minX, 0); }
  public static void AddMinY(FlatBufferBuilder builder, int minY) { builder.AddInt(8, minY, 0); }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FCurtainData> EndFCurtainData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Royal.Scenes.Game.Utils.FlatLevel.FCurtainData>(o);
  }
  public FCurtainDataT UnPack() {
    var _o = new FCurtainDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FCurtainDataT _o) {
    _o.Id = this.Id;
    _o.ColorId = this.ColorId;
    _o.Order = this.Order;
    _o.Target = this.Target;
    _o.CellCount = this.CellCount;
    _o.Width = this.Width;
    _o.Height = this.Height;
    _o.MinX = this.MinX;
    _o.MinY = this.MinY;
  }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FCurtainData> Pack(FlatBufferBuilder builder, FCurtainDataT _o) {
    if (_o == null) return default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FCurtainData>);
    return CreateFCurtainData(
      builder,
      _o.Id,
      _o.ColorId,
      _o.Order,
      _o.Target,
      _o.CellCount,
      _o.Width,
      _o.Height,
      _o.MinX,
      _o.MinY);
  }
}

public class FCurtainDataT
{
  [Newtonsoft.Json.JsonProperty("Id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("ColorId")]
  public int ColorId { get; set; }
  [Newtonsoft.Json.JsonProperty("Order")]
  public int Order { get; set; }
  [Newtonsoft.Json.JsonProperty("Target")]
  public int Target { get; set; }
  [Newtonsoft.Json.JsonProperty("CellCount")]
  public int CellCount { get; set; }
  [Newtonsoft.Json.JsonProperty("Width")]
  public int Width { get; set; }
  [Newtonsoft.Json.JsonProperty("Height")]
  public int Height { get; set; }
  [Newtonsoft.Json.JsonProperty("MinX")]
  public int MinX { get; set; }
  [Newtonsoft.Json.JsonProperty("MinY")]
  public int MinY { get; set; }

  public FCurtainDataT() {
    this.Id = 0;
    this.ColorId = 0;
    this.Order = 0;
    this.Target = 0;
    this.CellCount = 0;
    this.Width = 0;
    this.Height = 0;
    this.MinX = 0;
    this.MinY = 0;
  }
}


static public class FCurtainDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ColorId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Order*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Target*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*CellCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Width*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Height*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*MinX*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*MinY*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
