// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Royal.Scenes.Game.Utils.FlatLevel
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FGoalData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static FGoalData GetRootAsFGoalData(ByteBuffer _bb) { return GetRootAsFGoalData(_bb, new FGoalData()); }
  public static FGoalData GetRootAsFGoalData(ByteBuffer _bb, FGoalData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FGoalData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Goal { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Count { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsFromSettings { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int BoardId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FGoalData> CreateFGoalData(FlatBufferBuilder builder,
      int Goal = 0,
      int Count = 0,
      bool IsFromSettings = false,
      int BoardId = 0) {
    builder.StartTable(4);
    FGoalData.AddBoardId(builder, BoardId);
    FGoalData.AddCount(builder, Count);
    FGoalData.AddGoal(builder, Goal);
    FGoalData.AddIsFromSettings(builder, IsFromSettings);
    return FGoalData.EndFGoalData(builder);
  }

  public static void StartFGoalData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddGoal(FlatBufferBuilder builder, int goal) { builder.AddInt(0, goal, 0); }
  public static void AddCount(FlatBufferBuilder builder, int count) { builder.AddInt(1, count, 0); }
  public static void AddIsFromSettings(FlatBufferBuilder builder, bool isFromSettings) { builder.AddBool(2, isFromSettings, false); }
  public static void AddBoardId(FlatBufferBuilder builder, int boardId) { builder.AddInt(3, boardId, 0); }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FGoalData> EndFGoalData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Royal.Scenes.Game.Utils.FlatLevel.FGoalData>(o);
  }
  public FGoalDataT UnPack() {
    var _o = new FGoalDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FGoalDataT _o) {
    _o.Goal = this.Goal;
    _o.Count = this.Count;
    _o.IsFromSettings = this.IsFromSettings;
    _o.BoardId = this.BoardId;
  }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FGoalData> Pack(FlatBufferBuilder builder, FGoalDataT _o) {
    if (_o == null) return default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FGoalData>);
    return CreateFGoalData(
      builder,
      _o.Goal,
      _o.Count,
      _o.IsFromSettings,
      _o.BoardId);
  }
}

public class FGoalDataT
{
  [Newtonsoft.Json.JsonProperty("Goal")]
  public int Goal { get; set; }
  [Newtonsoft.Json.JsonProperty("Count")]
  public int Count { get; set; }
  [Newtonsoft.Json.JsonProperty("IsFromSettings")]
  public bool IsFromSettings { get; set; }
  [Newtonsoft.Json.JsonProperty("BoardId")]
  public int BoardId { get; set; }

  public FGoalDataT() {
    this.Goal = 0;
    this.Count = 0;
    this.IsFromSettings = false;
    this.BoardId = 0;
  }
}


static public class FGoalDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Goal*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Count*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*IsFromSettings*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*BoardId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
