// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Royal.Scenes.Game.Utils.FlatLevel
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FTiledPredefined : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static FTiledPredefined GetRootAsFTiledPredefined(ByteBuffer _bb) { return GetRootAsFTiledPredefined(_bb, new FTiledPredefined()); }
  public static FTiledPredefined GetRootAsFTiledPredefined(ByteBuffer _bb, FTiledPredefined obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FTiledPredefined __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Ids(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int IdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetIdsBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetIdsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetIdsArray() { return __p.__vector_as_array<int>(8); }

  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledPredefined> CreateFTiledPredefined(FlatBufferBuilder builder,
      int X = 0,
      int Y = 0,
      VectorOffset IdsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    FTiledPredefined.AddIds(builder, IdsOffset);
    FTiledPredefined.AddY(builder, Y);
    FTiledPredefined.AddX(builder, X);
    return FTiledPredefined.EndFTiledPredefined(builder);
  }

  public static void StartFTiledPredefined(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddX(FlatBufferBuilder builder, int x) { builder.AddInt(0, x, 0); }
  public static void AddY(FlatBufferBuilder builder, int y) { builder.AddInt(1, y, 0); }
  public static void AddIds(FlatBufferBuilder builder, VectorOffset idsOffset) { builder.AddOffset(2, idsOffset.Value, 0); }
  public static VectorOffset CreateIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIdsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledPredefined> EndFTiledPredefined(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledPredefined>(o);
  }
  public FTiledPredefinedT UnPack() {
    var _o = new FTiledPredefinedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FTiledPredefinedT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Ids = new List<int>();
    for (var _j = 0; _j < this.IdsLength; ++_j) {_o.Ids.Add(this.Ids(_j));}
  }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledPredefined> Pack(FlatBufferBuilder builder, FTiledPredefinedT _o) {
    if (_o == null) return default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledPredefined>);
    var _Ids = default(VectorOffset);
    if (_o.Ids != null) {
      var __Ids = _o.Ids.ToArray();
      _Ids = CreateIdsVector(builder, __Ids);
    }
    return CreateFTiledPredefined(
      builder,
      _o.X,
      _o.Y,
      _Ids);
  }
}

public class FTiledPredefinedT
{
  [Newtonsoft.Json.JsonProperty("X")]
  public int X { get; set; }
  [Newtonsoft.Json.JsonProperty("Y")]
  public int Y { get; set; }
  [Newtonsoft.Json.JsonProperty("Ids")]
  public List<int> Ids { get; set; }

  public FTiledPredefinedT() {
    this.X = 0;
    this.Y = 0;
    this.Ids = null;
  }
}


static public class FTiledPredefinedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*X*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Y*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Ids*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
