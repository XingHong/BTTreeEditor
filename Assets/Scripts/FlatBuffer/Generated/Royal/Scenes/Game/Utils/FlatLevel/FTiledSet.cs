// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Royal.Scenes.Game.Utils.FlatLevel
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FTiledSet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static FTiledSet GetRootAsFTiledSet(ByteBuffer _bb) { return GetRootAsFTiledSet(_bb, new FTiledSet()); }
  public static FTiledSet GetRootAsFTiledSet(ByteBuffer _bb, FTiledSet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FTiledSet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public Royal.Scenes.Game.Utils.FlatLevel.FTiledSetElement? Elements(int j) { int o = __p.__offset(6); return o != 0 ? (Royal.Scenes.Game.Utils.FlatLevel.FTiledSetElement?)(new Royal.Scenes.Game.Utils.FlatLevel.FTiledSetElement()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ElementsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool CanFall { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int CreateRatio { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TargetColumns(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TargetColumnsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTargetColumnsBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetTargetColumnsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetTargetColumnsArray() { return __p.__vector_as_array<int>(12); }
  public int BirdMax { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FrogMax { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TargetFills(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TargetFillsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTargetFillsBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetTargetFillsBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetTargetFillsArray() { return __p.__vector_as_array<int>(18); }
  public int TargetFillRatios(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TargetFillRatiosLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTargetFillRatiosBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetTargetFillRatiosBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetTargetFillRatiosArray() { return __p.__vector_as_array<int>(20); }
  public Royal.Scenes.Game.Utils.FlatLevel.FTiledSetMaxItemCount? MaxItemCounts(int j) { int o = __p.__offset(22); return o != 0 ? (Royal.Scenes.Game.Utils.FlatLevel.FTiledSetMaxItemCount?)(new Royal.Scenes.Game.Utils.FlatLevel.FTiledSetMaxItemCount()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MaxItemCountsLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSet> CreateFTiledSet(FlatBufferBuilder builder,
      StringOffset NameOffset = default(StringOffset),
      VectorOffset ElementsOffset = default(VectorOffset),
      bool CanFall = false,
      int CreateRatio = 0,
      VectorOffset TargetColumnsOffset = default(VectorOffset),
      int BirdMax = 0,
      int FrogMax = 0,
      VectorOffset TargetFillsOffset = default(VectorOffset),
      VectorOffset TargetFillRatiosOffset = default(VectorOffset),
      VectorOffset MaxItemCountsOffset = default(VectorOffset)) {
    builder.StartTable(10);
    FTiledSet.AddMaxItemCounts(builder, MaxItemCountsOffset);
    FTiledSet.AddTargetFillRatios(builder, TargetFillRatiosOffset);
    FTiledSet.AddTargetFills(builder, TargetFillsOffset);
    FTiledSet.AddFrogMax(builder, FrogMax);
    FTiledSet.AddBirdMax(builder, BirdMax);
    FTiledSet.AddTargetColumns(builder, TargetColumnsOffset);
    FTiledSet.AddCreateRatio(builder, CreateRatio);
    FTiledSet.AddElements(builder, ElementsOffset);
    FTiledSet.AddName(builder, NameOffset);
    FTiledSet.AddCanFall(builder, CanFall);
    return FTiledSet.EndFTiledSet(builder);
  }

  public static void StartFTiledSet(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddElements(FlatBufferBuilder builder, VectorOffset elementsOffset) { builder.AddOffset(1, elementsOffset.Value, 0); }
  public static VectorOffset CreateElementsVector(FlatBufferBuilder builder, Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetElement>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateElementsVectorBlock(FlatBufferBuilder builder, Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetElement>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElementsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetElement>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElementsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetElement>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartElementsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCanFall(FlatBufferBuilder builder, bool canFall) { builder.AddBool(2, canFall, false); }
  public static void AddCreateRatio(FlatBufferBuilder builder, int createRatio) { builder.AddInt(3, createRatio, 0); }
  public static void AddTargetColumns(FlatBufferBuilder builder, VectorOffset targetColumnsOffset) { builder.AddOffset(4, targetColumnsOffset.Value, 0); }
  public static VectorOffset CreateTargetColumnsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTargetColumnsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetColumnsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetColumnsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTargetColumnsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBirdMax(FlatBufferBuilder builder, int birdMax) { builder.AddInt(5, birdMax, 0); }
  public static void AddFrogMax(FlatBufferBuilder builder, int frogMax) { builder.AddInt(6, frogMax, 0); }
  public static void AddTargetFills(FlatBufferBuilder builder, VectorOffset targetFillsOffset) { builder.AddOffset(7, targetFillsOffset.Value, 0); }
  public static VectorOffset CreateTargetFillsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTargetFillsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetFillsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetFillsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTargetFillsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTargetFillRatios(FlatBufferBuilder builder, VectorOffset targetFillRatiosOffset) { builder.AddOffset(8, targetFillRatiosOffset.Value, 0); }
  public static VectorOffset CreateTargetFillRatiosVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTargetFillRatiosVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetFillRatiosVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTargetFillRatiosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTargetFillRatiosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMaxItemCounts(FlatBufferBuilder builder, VectorOffset maxItemCountsOffset) { builder.AddOffset(9, maxItemCountsOffset.Value, 0); }
  public static VectorOffset CreateMaxItemCountsVector(FlatBufferBuilder builder, Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetMaxItemCount>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMaxItemCountsVectorBlock(FlatBufferBuilder builder, Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetMaxItemCount>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMaxItemCountsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetMaxItemCount>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMaxItemCountsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetMaxItemCount>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMaxItemCountsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSet> EndFTiledSet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSet>(o);
  }
  public FTiledSetT UnPack() {
    var _o = new FTiledSetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FTiledSetT _o) {
    _o.Name = this.Name;
    _o.Elements = new List<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetElementT>();
    for (var _j = 0; _j < this.ElementsLength; ++_j) {_o.Elements.Add(this.Elements(_j).HasValue ? this.Elements(_j).Value.UnPack() : null);}
    _o.CanFall = this.CanFall;
    _o.CreateRatio = this.CreateRatio;
    _o.TargetColumns = new List<int>();
    for (var _j = 0; _j < this.TargetColumnsLength; ++_j) {_o.TargetColumns.Add(this.TargetColumns(_j));}
    _o.BirdMax = this.BirdMax;
    _o.FrogMax = this.FrogMax;
    _o.TargetFills = new List<int>();
    for (var _j = 0; _j < this.TargetFillsLength; ++_j) {_o.TargetFills.Add(this.TargetFills(_j));}
    _o.TargetFillRatios = new List<int>();
    for (var _j = 0; _j < this.TargetFillRatiosLength; ++_j) {_o.TargetFillRatios.Add(this.TargetFillRatios(_j));}
    _o.MaxItemCounts = new List<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetMaxItemCountT>();
    for (var _j = 0; _j < this.MaxItemCountsLength; ++_j) {_o.MaxItemCounts.Add(this.MaxItemCounts(_j).HasValue ? this.MaxItemCounts(_j).Value.UnPack() : null);}
  }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSet> Pack(FlatBufferBuilder builder, FTiledSetT _o) {
    if (_o == null) return default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSet>);
    var _Name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _Elements = default(VectorOffset);
    if (_o.Elements != null) {
      var __Elements = new Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetElement>[_o.Elements.Count];
      for (var _j = 0; _j < __Elements.Length; ++_j) { __Elements[_j] = Royal.Scenes.Game.Utils.FlatLevel.FTiledSetElement.Pack(builder, _o.Elements[_j]); }
      _Elements = CreateElementsVector(builder, __Elements);
    }
    var _TargetColumns = default(VectorOffset);
    if (_o.TargetColumns != null) {
      var __TargetColumns = _o.TargetColumns.ToArray();
      _TargetColumns = CreateTargetColumnsVector(builder, __TargetColumns);
    }
    var _TargetFills = default(VectorOffset);
    if (_o.TargetFills != null) {
      var __TargetFills = _o.TargetFills.ToArray();
      _TargetFills = CreateTargetFillsVector(builder, __TargetFills);
    }
    var _TargetFillRatios = default(VectorOffset);
    if (_o.TargetFillRatios != null) {
      var __TargetFillRatios = _o.TargetFillRatios.ToArray();
      _TargetFillRatios = CreateTargetFillRatiosVector(builder, __TargetFillRatios);
    }
    var _MaxItemCounts = default(VectorOffset);
    if (_o.MaxItemCounts != null) {
      var __MaxItemCounts = new Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetMaxItemCount>[_o.MaxItemCounts.Count];
      for (var _j = 0; _j < __MaxItemCounts.Length; ++_j) { __MaxItemCounts[_j] = Royal.Scenes.Game.Utils.FlatLevel.FTiledSetMaxItemCount.Pack(builder, _o.MaxItemCounts[_j]); }
      _MaxItemCounts = CreateMaxItemCountsVector(builder, __MaxItemCounts);
    }
    return CreateFTiledSet(
      builder,
      _Name,
      _Elements,
      _o.CanFall,
      _o.CreateRatio,
      _TargetColumns,
      _o.BirdMax,
      _o.FrogMax,
      _TargetFills,
      _TargetFillRatios,
      _MaxItemCounts);
  }
}

public class FTiledSetT
{
  public string Name { get; set; }
  public List<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetElementT> Elements { get; set; }
  public bool CanFall { get; set; }
  public int CreateRatio { get; set; }
  public List<int> TargetColumns { get; set; }
  public int BirdMax { get; set; }
  public int FrogMax { get; set; }
  public List<int> TargetFills { get; set; }
  public List<int> TargetFillRatios { get; set; }
  public List<Royal.Scenes.Game.Utils.FlatLevel.FTiledSetMaxItemCountT> MaxItemCounts { get; set; }

  public FTiledSetT() {
    this.Name = null;
    this.Elements = null;
    this.CanFall = false;
    this.CreateRatio = 0;
    this.TargetColumns = null;
    this.BirdMax = 0;
    this.FrogMax = 0;
    this.TargetFills = null;
    this.TargetFillRatios = null;
    this.MaxItemCounts = null;
  }
}


static public class FTiledSetVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Elements*/, Royal.Scenes.Game.Utils.FlatLevel.FTiledSetElementVerify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*CanFall*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*CreateRatio*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*TargetColumns*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 14 /*BirdMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*FrogMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*TargetFills*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*TargetFillRatios*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 22 /*MaxItemCounts*/, Royal.Scenes.Game.Utils.FlatLevel.FTiledSetMaxItemCountVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
