// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Royal.Scenes.Game.Utils.FlatLevel
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FTiledCell : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static FTiledCell GetRootAsFTiledCell(ByteBuffer _bb) { return GetRootAsFTiledCell(_bb, new FTiledCell()); }
  public static FTiledCell GetRootAsFTiledCell(ByteBuffer _bb, FTiledCell obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FTiledCell __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int FillType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsPredefined { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int Grass { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Honey { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Curtain { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Chain { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Roof { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Jelly { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Treasuremap { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Ceramic { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MushroomSoil { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Blinds { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WaterSoil { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledCell> CreateFTiledCell(FlatBufferBuilder builder,
      int FillType = 0,
      bool IsPredefined = false,
      int Grass = 0,
      int Honey = 0,
      int Curtain = 0,
      int Chain = 0,
      int Roof = 0,
      int Jelly = 0,
      int Treasuremap = 0,
      int Ceramic = 0,
      int MushroomSoil = 0,
      int Blinds = 0,
      int WaterSoil = 0) {
    builder.StartTable(13);
    FTiledCell.AddWaterSoil(builder, WaterSoil);
    FTiledCell.AddBlinds(builder, Blinds);
    FTiledCell.AddMushroomSoil(builder, MushroomSoil);
    FTiledCell.AddCeramic(builder, Ceramic);
    FTiledCell.AddTreasuremap(builder, Treasuremap);
    FTiledCell.AddJelly(builder, Jelly);
    FTiledCell.AddRoof(builder, Roof);
    FTiledCell.AddChain(builder, Chain);
    FTiledCell.AddCurtain(builder, Curtain);
    FTiledCell.AddHoney(builder, Honey);
    FTiledCell.AddGrass(builder, Grass);
    FTiledCell.AddFillType(builder, FillType);
    FTiledCell.AddIsPredefined(builder, IsPredefined);
    return FTiledCell.EndFTiledCell(builder);
  }

  public static void StartFTiledCell(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddFillType(FlatBufferBuilder builder, int fillType) { builder.AddInt(0, fillType, 0); }
  public static void AddIsPredefined(FlatBufferBuilder builder, bool isPredefined) { builder.AddBool(1, isPredefined, false); }
  public static void AddGrass(FlatBufferBuilder builder, int grass) { builder.AddInt(2, grass, 0); }
  public static void AddHoney(FlatBufferBuilder builder, int honey) { builder.AddInt(3, honey, 0); }
  public static void AddCurtain(FlatBufferBuilder builder, int curtain) { builder.AddInt(4, curtain, 0); }
  public static void AddChain(FlatBufferBuilder builder, int chain) { builder.AddInt(5, chain, 0); }
  public static void AddRoof(FlatBufferBuilder builder, int roof) { builder.AddInt(6, roof, 0); }
  public static void AddJelly(FlatBufferBuilder builder, int jelly) { builder.AddInt(7, jelly, 0); }
  public static void AddTreasuremap(FlatBufferBuilder builder, int treasuremap) { builder.AddInt(8, treasuremap, 0); }
  public static void AddCeramic(FlatBufferBuilder builder, int ceramic) { builder.AddInt(9, ceramic, 0); }
  public static void AddMushroomSoil(FlatBufferBuilder builder, int mushroomSoil) { builder.AddInt(10, mushroomSoil, 0); }
  public static void AddBlinds(FlatBufferBuilder builder, int blinds) { builder.AddInt(11, blinds, 0); }
  public static void AddWaterSoil(FlatBufferBuilder builder, int waterSoil) { builder.AddInt(12, waterSoil, 0); }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledCell> EndFTiledCell(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledCell>(o);
  }
  public FTiledCellT UnPack() {
    var _o = new FTiledCellT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FTiledCellT _o) {
    _o.FillType = this.FillType;
    _o.IsPredefined = this.IsPredefined;
    _o.Grass = this.Grass;
    _o.Honey = this.Honey;
    _o.Curtain = this.Curtain;
    _o.Chain = this.Chain;
    _o.Roof = this.Roof;
    _o.Jelly = this.Jelly;
    _o.Treasuremap = this.Treasuremap;
    _o.Ceramic = this.Ceramic;
    _o.MushroomSoil = this.MushroomSoil;
    _o.Blinds = this.Blinds;
    _o.WaterSoil = this.WaterSoil;
  }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledCell> Pack(FlatBufferBuilder builder, FTiledCellT _o) {
    if (_o == null) return default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FTiledCell>);
    return CreateFTiledCell(
      builder,
      _o.FillType,
      _o.IsPredefined,
      _o.Grass,
      _o.Honey,
      _o.Curtain,
      _o.Chain,
      _o.Roof,
      _o.Jelly,
      _o.Treasuremap,
      _o.Ceramic,
      _o.MushroomSoil,
      _o.Blinds,
      _o.WaterSoil);
  }
}

public class FTiledCellT
{
  public int FillType { get; set; }
  public bool IsPredefined { get; set; }
  public int Grass { get; set; }
  public int Honey { get; set; }
  public int Curtain { get; set; }
  public int Chain { get; set; }
  public int Roof { get; set; }
  public int Jelly { get; set; }
  public int Treasuremap { get; set; }
  public int Ceramic { get; set; }
  public int MushroomSoil { get; set; }
  public int Blinds { get; set; }
  public int WaterSoil { get; set; }

  public FTiledCellT() {
    this.FillType = 0;
    this.IsPredefined = false;
    this.Grass = 0;
    this.Honey = 0;
    this.Curtain = 0;
    this.Chain = 0;
    this.Roof = 0;
    this.Jelly = 0;
    this.Treasuremap = 0;
    this.Ceramic = 0;
    this.MushroomSoil = 0;
    this.Blinds = 0;
    this.WaterSoil = 0;
  }
}


static public class FTiledCellVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*FillType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*IsPredefined*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*Grass*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Honey*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Curtain*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Chain*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Roof*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Jelly*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Treasuremap*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*Ceramic*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*MushroomSoil*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*Blinds*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*WaterSoil*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
