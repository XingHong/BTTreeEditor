// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Royal.Scenes.Game.Utils.FlatLevel
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FDirectedPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static FDirectedPoint GetRootAsFDirectedPoint(ByteBuffer _bb) { return GetRootAsFDirectedPoint(_bb, new FDirectedPoint()); }
  public static FDirectedPoint GetRootAsFDirectedPoint(ByteBuffer _bb, FDirectedPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FDirectedPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Royal.Scenes.Game.Utils.FlatLevel.FPoint? Point { get { int o = __p.__offset(4); return o != 0 ? (Royal.Scenes.Game.Utils.FlatLevel.FPoint?)(new Royal.Scenes.Game.Utils.FlatLevel.FPoint()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int Direction { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint> CreateFDirectedPoint(FlatBufferBuilder builder,
      Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint> PointOffset = default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>),
      int Direction = 0) {
    builder.StartTable(2);
    FDirectedPoint.AddDirection(builder, Direction);
    FDirectedPoint.AddPoint(builder, PointOffset);
    return FDirectedPoint.EndFDirectedPoint(builder);
  }

  public static void StartFDirectedPoint(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPoint(FlatBufferBuilder builder, Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint> pointOffset) { builder.AddOffset(0, pointOffset.Value, 0); }
  public static void AddDirection(FlatBufferBuilder builder, int direction) { builder.AddInt(1, direction, 0); }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint> EndFDirectedPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint>(o);
  }
  public FDirectedPointT UnPack() {
    var _o = new FDirectedPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FDirectedPointT _o) {
    _o.Point = this.Point.HasValue ? this.Point.Value.UnPack() : null;
    _o.Direction = this.Direction;
  }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint> Pack(FlatBufferBuilder builder, FDirectedPointT _o) {
    if (_o == null) return default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint>);
    var _Point = _o.Point == null ? default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>) : Royal.Scenes.Game.Utils.FlatLevel.FPoint.Pack(builder, _o.Point);
    return CreateFDirectedPoint(
      builder,
      _Point,
      _o.Direction);
  }
}

public class FDirectedPointT
{
  public Royal.Scenes.Game.Utils.FlatLevel.FPointT Point { get; set; }
  public int Direction { get; set; }

  public FDirectedPointT() {
    this.Point = null;
    this.Direction = 0;
  }
}


static public class FDirectedPointVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*Point*/, Royal.Scenes.Game.Utils.FlatLevel.FPointVerify.Verify, false)
      && verifier.VerifyField(tablePos, 6 /*Direction*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
