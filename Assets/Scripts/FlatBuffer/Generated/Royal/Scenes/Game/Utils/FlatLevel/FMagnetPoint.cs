// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Royal.Scenes.Game.Utils.FlatLevel
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FMagnetPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static FMagnetPoint GetRootAsFMagnetPoint(ByteBuffer _bb) { return GetRootAsFMagnetPoint(_bb, new FMagnetPoint()); }
  public static FMagnetPoint GetRootAsFMagnetPoint(ByteBuffer _bb, FMagnetPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FMagnetPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Royal.Scenes.Game.Utils.FlatLevel.FPoint? Cell { get { int o = __p.__offset(4); return o != 0 ? (Royal.Scenes.Game.Utils.FlatLevel.FPoint?)(new Royal.Scenes.Game.Utils.FlatLevel.FPoint()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool IsHead { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int DirectionTiledId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FMagnetPoint> CreateFMagnetPoint(FlatBufferBuilder builder,
      Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint> CellOffset = default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>),
      bool IsHead = false,
      int DirectionTiledId = 0) {
    builder.StartTable(3);
    FMagnetPoint.AddDirectionTiledId(builder, DirectionTiledId);
    FMagnetPoint.AddCell(builder, CellOffset);
    FMagnetPoint.AddIsHead(builder, IsHead);
    return FMagnetPoint.EndFMagnetPoint(builder);
  }

  public static void StartFMagnetPoint(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCell(FlatBufferBuilder builder, Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint> cellOffset) { builder.AddOffset(0, cellOffset.Value, 0); }
  public static void AddIsHead(FlatBufferBuilder builder, bool isHead) { builder.AddBool(1, isHead, false); }
  public static void AddDirectionTiledId(FlatBufferBuilder builder, int directionTiledId) { builder.AddInt(2, directionTiledId, 0); }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FMagnetPoint> EndFMagnetPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Royal.Scenes.Game.Utils.FlatLevel.FMagnetPoint>(o);
  }
  public FMagnetPointT UnPack() {
    var _o = new FMagnetPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FMagnetPointT _o) {
    _o.Cell = this.Cell.HasValue ? this.Cell.Value.UnPack() : null;
    _o.IsHead = this.IsHead;
    _o.DirectionTiledId = this.DirectionTiledId;
  }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FMagnetPoint> Pack(FlatBufferBuilder builder, FMagnetPointT _o) {
    if (_o == null) return default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FMagnetPoint>);
    var _Cell = _o.Cell == null ? default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>) : Royal.Scenes.Game.Utils.FlatLevel.FPoint.Pack(builder, _o.Cell);
    return CreateFMagnetPoint(
      builder,
      _Cell,
      _o.IsHead,
      _o.DirectionTiledId);
  }
}

public class FMagnetPointT
{
  public Royal.Scenes.Game.Utils.FlatLevel.FPointT Cell { get; set; }
  public bool IsHead { get; set; }
  public int DirectionTiledId { get; set; }

  public FMagnetPointT() {
    this.Cell = null;
    this.IsHead = false;
    this.DirectionTiledId = 0;
  }
}


static public class FMagnetPointVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*Cell*/, Royal.Scenes.Game.Utils.FlatLevel.FPointVerify.Verify, false)
      && verifier.VerifyField(tablePos, 6 /*IsHead*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*DirectionTiledId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
