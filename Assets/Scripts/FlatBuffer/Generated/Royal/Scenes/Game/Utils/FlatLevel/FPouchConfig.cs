// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Royal.Scenes.Game.Utils.FlatLevel
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FPouchConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static FPouchConfig GetRootAsFPouchConfig(ByteBuffer _bb) { return GetRootAsFPouchConfig(_bb, new FPouchConfig()); }
  public static FPouchConfig GetRootAsFPouchConfig(ByteBuffer _bb, FPouchConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FPouchConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsAvailableFalling { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int LightballRatio { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TntRatio { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RocketHorizontalRatio { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RocketVerticalRatio { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PropellerRatio { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FPouchConfig> CreateFPouchConfig(FlatBufferBuilder builder,
      bool IsAvailableFalling = false,
      int LightballRatio = 0,
      int TntRatio = 0,
      int RocketHorizontalRatio = 0,
      int RocketVerticalRatio = 0,
      int PropellerRatio = 0) {
    builder.StartTable(6);
    FPouchConfig.AddPropellerRatio(builder, PropellerRatio);
    FPouchConfig.AddRocketVerticalRatio(builder, RocketVerticalRatio);
    FPouchConfig.AddRocketHorizontalRatio(builder, RocketHorizontalRatio);
    FPouchConfig.AddTntRatio(builder, TntRatio);
    FPouchConfig.AddLightballRatio(builder, LightballRatio);
    FPouchConfig.AddIsAvailableFalling(builder, IsAvailableFalling);
    return FPouchConfig.EndFPouchConfig(builder);
  }

  public static void StartFPouchConfig(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddIsAvailableFalling(FlatBufferBuilder builder, bool isAvailableFalling) { builder.AddBool(0, isAvailableFalling, false); }
  public static void AddLightballRatio(FlatBufferBuilder builder, int lightballRatio) { builder.AddInt(1, lightballRatio, 0); }
  public static void AddTntRatio(FlatBufferBuilder builder, int tntRatio) { builder.AddInt(2, tntRatio, 0); }
  public static void AddRocketHorizontalRatio(FlatBufferBuilder builder, int rocketHorizontalRatio) { builder.AddInt(3, rocketHorizontalRatio, 0); }
  public static void AddRocketVerticalRatio(FlatBufferBuilder builder, int rocketVerticalRatio) { builder.AddInt(4, rocketVerticalRatio, 0); }
  public static void AddPropellerRatio(FlatBufferBuilder builder, int propellerRatio) { builder.AddInt(5, propellerRatio, 0); }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FPouchConfig> EndFPouchConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Royal.Scenes.Game.Utils.FlatLevel.FPouchConfig>(o);
  }
  public FPouchConfigT UnPack() {
    var _o = new FPouchConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FPouchConfigT _o) {
    _o.IsAvailableFalling = this.IsAvailableFalling;
    _o.LightballRatio = this.LightballRatio;
    _o.TntRatio = this.TntRatio;
    _o.RocketHorizontalRatio = this.RocketHorizontalRatio;
    _o.RocketVerticalRatio = this.RocketVerticalRatio;
    _o.PropellerRatio = this.PropellerRatio;
  }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FPouchConfig> Pack(FlatBufferBuilder builder, FPouchConfigT _o) {
    if (_o == null) return default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FPouchConfig>);
    return CreateFPouchConfig(
      builder,
      _o.IsAvailableFalling,
      _o.LightballRatio,
      _o.TntRatio,
      _o.RocketHorizontalRatio,
      _o.RocketVerticalRatio,
      _o.PropellerRatio);
  }
}

public class FPouchConfigT
{
  public bool IsAvailableFalling { get; set; }
  public int LightballRatio { get; set; }
  public int TntRatio { get; set; }
  public int RocketHorizontalRatio { get; set; }
  public int RocketVerticalRatio { get; set; }
  public int PropellerRatio { get; set; }

  public FPouchConfigT() {
    this.IsAvailableFalling = false;
    this.LightballRatio = 0;
    this.TntRatio = 0;
    this.RocketHorizontalRatio = 0;
    this.RocketVerticalRatio = 0;
    this.PropellerRatio = 0;
  }
}


static public class FPouchConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*IsAvailableFalling*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*LightballRatio*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*TntRatio*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*RocketHorizontalRatio*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RocketVerticalRatio*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*PropellerRatio*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
