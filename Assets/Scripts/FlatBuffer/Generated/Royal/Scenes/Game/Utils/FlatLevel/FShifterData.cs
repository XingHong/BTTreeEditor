// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Royal.Scenes.Game.Utils.FlatLevel
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FShifterData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static FShifterData GetRootAsFShifterData(ByteBuffer _bb) { return GetRootAsFShifterData(_bb, new FShifterData()); }
  public static FShifterData GetRootAsFShifterData(ByteBuffer _bb, FShifterData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FShifterData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Royal.Scenes.Game.Utils.FlatLevel.FPoint? ItemCells(int j) { int o = __p.__offset(4); return o != 0 ? (Royal.Scenes.Game.Utils.FlatLevel.FPoint?)(new Royal.Scenes.Game.Utils.FlatLevel.FPoint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItemCellsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int StartMasterIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EndMasterIndex { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint? Start { get { int o = __p.__offset(10); return o != 0 ? (Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint?)(new Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint? TurnPoint { get { int o = __p.__offset(12); return o != 0 ? (Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint?)(new Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint? End { get { int o = __p.__offset(14); return o != 0 ? (Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint?)(new Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FShifterData> CreateFShifterData(FlatBufferBuilder builder,
      VectorOffset ItemCellsOffset = default(VectorOffset),
      int StartMasterIndex = 0,
      int EndMasterIndex = 0,
      Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint> StartOffset = default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint>),
      Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint> TurnPointOffset = default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint>),
      Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint> EndOffset = default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint>)) {
    builder.StartTable(6);
    FShifterData.AddEnd(builder, EndOffset);
    FShifterData.AddTurnPoint(builder, TurnPointOffset);
    FShifterData.AddStart(builder, StartOffset);
    FShifterData.AddEndMasterIndex(builder, EndMasterIndex);
    FShifterData.AddStartMasterIndex(builder, StartMasterIndex);
    FShifterData.AddItemCells(builder, ItemCellsOffset);
    return FShifterData.EndFShifterData(builder);
  }

  public static void StartFShifterData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddItemCells(FlatBufferBuilder builder, VectorOffset itemCellsOffset) { builder.AddOffset(0, itemCellsOffset.Value, 0); }
  public static VectorOffset CreateItemCellsVector(FlatBufferBuilder builder, Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateItemCellsVectorBlock(FlatBufferBuilder builder, Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemCellsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemCellsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartItemCellsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStartMasterIndex(FlatBufferBuilder builder, int startMasterIndex) { builder.AddInt(1, startMasterIndex, 0); }
  public static void AddEndMasterIndex(FlatBufferBuilder builder, int endMasterIndex) { builder.AddInt(2, endMasterIndex, 0); }
  public static void AddStart(FlatBufferBuilder builder, Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint> startOffset) { builder.AddOffset(3, startOffset.Value, 0); }
  public static void AddTurnPoint(FlatBufferBuilder builder, Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint> turnPointOffset) { builder.AddOffset(4, turnPointOffset.Value, 0); }
  public static void AddEnd(FlatBufferBuilder builder, Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint> endOffset) { builder.AddOffset(5, endOffset.Value, 0); }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FShifterData> EndFShifterData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Royal.Scenes.Game.Utils.FlatLevel.FShifterData>(o);
  }
  public FShifterDataT UnPack() {
    var _o = new FShifterDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FShifterDataT _o) {
    _o.ItemCells = new List<Royal.Scenes.Game.Utils.FlatLevel.FPointT>();
    for (var _j = 0; _j < this.ItemCellsLength; ++_j) {_o.ItemCells.Add(this.ItemCells(_j).HasValue ? this.ItemCells(_j).Value.UnPack() : null);}
    _o.StartMasterIndex = this.StartMasterIndex;
    _o.EndMasterIndex = this.EndMasterIndex;
    _o.Start = this.Start.HasValue ? this.Start.Value.UnPack() : null;
    _o.TurnPoint = this.TurnPoint.HasValue ? this.TurnPoint.Value.UnPack() : null;
    _o.End = this.End.HasValue ? this.End.Value.UnPack() : null;
  }
  public static Offset<Royal.Scenes.Game.Utils.FlatLevel.FShifterData> Pack(FlatBufferBuilder builder, FShifterDataT _o) {
    if (_o == null) return default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FShifterData>);
    var _ItemCells = default(VectorOffset);
    if (_o.ItemCells != null) {
      var __ItemCells = new Offset<Royal.Scenes.Game.Utils.FlatLevel.FPoint>[_o.ItemCells.Count];
      for (var _j = 0; _j < __ItemCells.Length; ++_j) { __ItemCells[_j] = Royal.Scenes.Game.Utils.FlatLevel.FPoint.Pack(builder, _o.ItemCells[_j]); }
      _ItemCells = CreateItemCellsVector(builder, __ItemCells);
    }
    var _Start = _o.Start == null ? default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint>) : Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint.Pack(builder, _o.Start);
    var _TurnPoint = _o.TurnPoint == null ? default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint>) : Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint.Pack(builder, _o.TurnPoint);
    var _End = _o.End == null ? default(Offset<Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint>) : Royal.Scenes.Game.Utils.FlatLevel.FDirectedPoint.Pack(builder, _o.End);
    return CreateFShifterData(
      builder,
      _ItemCells,
      _o.StartMasterIndex,
      _o.EndMasterIndex,
      _Start,
      _TurnPoint,
      _End);
  }
}

public class FShifterDataT
{
  public List<Royal.Scenes.Game.Utils.FlatLevel.FPointT> ItemCells { get; set; }
  public int StartMasterIndex { get; set; }
  public int EndMasterIndex { get; set; }
  public Royal.Scenes.Game.Utils.FlatLevel.FDirectedPointT Start { get; set; }
  public Royal.Scenes.Game.Utils.FlatLevel.FDirectedPointT TurnPoint { get; set; }
  public Royal.Scenes.Game.Utils.FlatLevel.FDirectedPointT End { get; set; }

  public FShifterDataT() {
    this.ItemCells = null;
    this.StartMasterIndex = 0;
    this.EndMasterIndex = 0;
    this.Start = null;
    this.TurnPoint = null;
    this.End = null;
  }
}


static public class FShifterDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*ItemCells*/, Royal.Scenes.Game.Utils.FlatLevel.FPointVerify.Verify, false)
      && verifier.VerifyField(tablePos, 6 /*StartMasterIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*EndMasterIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 10 /*Start*/, Royal.Scenes.Game.Utils.FlatLevel.FDirectedPointVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 12 /*TurnPoint*/, Royal.Scenes.Game.Utils.FlatLevel.FDirectedPointVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 14 /*End*/, Royal.Scenes.Game.Utils.FlatLevel.FDirectedPointVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
